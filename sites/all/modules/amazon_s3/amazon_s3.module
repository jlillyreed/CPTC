<?php

/*Hooks*/

/**
 * Implementation of hook_menu()
 */
function amazon_s3_menu() {
  
  $items['admin/config/media/amazon-s3'] = array(
    'title' => 'Amazon S3',
    'description' => t('Authentication settings for Amazon S3'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_s3_settings'),
    'access arguments' => array('administer amazon s3'),
  );
  
  $items['admin/structure/amazon-s3'] = array(
    'title' => 'Amazon S3',
    'description' => t('View the buckets on your Amazon S3 account.'),
    'page callback' => 'amazon_s3_view_buckets',
    'page arguments' => array('admin'),
    'access arguments' => array('administer amazon s3'),
  );
  
  $items['admin/structure/amazon-s3/process-logs'] = array(
    'title' => 'Process Logs Manually',
    'description' => t('Process logs manually on your Amazon S3 account.'),
    'page callback' => 'amazon_s3_process_logs_manually',
    'page arguments' => array('admin'),
    'access arguments' => array('administer amazon s3'),
  );
  
  $items['admin/structure/amazon-s3/browse-logs'] = array(
    'title' => 'Browse Logs',
    'description' => t('Browse logs from your Amazon S3 account.'),
    'page callback' => 'amazon_s3_browse_logs',
    'page arguments' => array('admin'),
    'access arguments' => array('administer amazon s3'),
  );
  
  $items['admin/structure/amazon-s3/add-bucket'] = array(
    'title' => 'Add Bucket',
    'description' => t('Add a bucket.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_s3_bucket_create_form'),
    'access arguments' => array('administer amazon s3'),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE,
  );
  
  $items['admin/structure/amazon-s3/bucket/%'] = array(
    'title' => 'Bucket Objects',
    'description' => t('View the objects in a bucket.'),
    'page callback' => 'amazon_s3_view_objects',
    'page arguments' => array(4, 'admin'),
    'access arguments' => array('administer amazon s3'),
  );
  
  $items['admin/structure/amazon-s3/bucket/%/add-object'] = array(
    'title' => 'Add Object',
    'description' => t('Add an object to a bucket.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_s3_file_upload_form', 4),
    'access arguments' => array('administer amazon s3'),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE,
  );
  
  $items['admin/structure/amazon-s3/bucket/%/delete'] = array(
    'title' => 'Delete Bucket',
    'description' => t('Delete a bucket.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_s3_bucket_delete_confirm_form', 4),
    'access arguments' => array('administer amazon s3'),
  );
  
  $items['admin/structure/amazon-s3/bucket/%/%/delete'] = array(
    'title' => 'Delete Object from a Bucket',
    'description' => t('Delete an object in a bucket.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_s3_object_delete_confirm_form', 4, 5),
    'access arguments' => array('administer amazon s3'),
  );
  
  $items['amazon-s3/browser'] = array(
    'title' => 'Amazon S3',
    'description' => t('View the buckets on your Amazon S3 account.'),
    'page callback' => 'amazon_s3_view_buckets',
    'page arguments' => array('browser'),
    'access arguments' => array('administer amazon s3'),
    'type' => MENU_CALLBACK,
  );
  
  $items['amazon-s3/browser/%'] = array(
    'title' => 'Bucket Objects',
    'description' => t('View the objects in a bucket.'),
    'page callback' => 'amazon_s3_view_objects',
    'page arguments' => array(2, 'browser'),
    'access arguments' => array('administer amazon s3'),
    'type' => MENU_CALLBACK,
  );
  
  $items['amazon-s3/browser/info/%/%'] = array(
    'title' => 'Widget Info',
    'description' => t('View the objects in a bucket.'),
    'page callback' => '_amazon_s3_get_widget_info',
    'page arguments' => array(3, 4, 'browser'),
    'access arguments' => array('administer amazon s3'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of hook_perm()
 */
function amazon_s3_permission() {
  return array(
    'administer amazon s3' => array(
      'title' => t('Administer Amazon S3'),
      'description' => t('Configuration for Amazon S3.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Amazon S3 API Functions
 */

/**
 * Get the instance of the s3 object.
 *
 * @return S3
 */
function amazon_s3_get_instance() {
  static $s3 = NULL;
  
  if ($s3 == NULL) {
    module_load_include('inc', 'amazon_s3', 's3');
    $aws_access_key = variable_get('aws_access_key', '');
    $aws_secret_key = variable_get('aws_secret_key', '');
    $aws_ssl        = variable_get('aws_ssl', false);
    
    if (empty($aws_access_key) OR empty($aws_secret_key)) {
      drupal_set_message(t('You must !link.', array('!link' => l('set your aws access key and secret key', 'admin/config/media/amazon-s3'))), 'error');
    }
    
    $s3 = new S3($aws_access_key, $aws_secret_key, $aws_ssl);
  }
  
  return $s3;
}

function amazon_s3_get_buckets($detailed = FALSE) {
  $s3 = amazon_s3_get_instance();
  
  $buckets = $s3->listBuckets($detailed);
  
  if ($buckets == FALSE) {
    drupal_set_message(t('Unable to fetch list of buckets.'), 'error');
  }
  
  return $buckets;
}

function amazon_s3_bucket_create($bucket_name, $access_control = 'private', $location = FALSE) {
  $s3 = amazon_s3_get_instance();
  
  $newBucket = $s3->putBucket($bucket_name, $access_control, $location = FALSE);
  
  if ($newBucket == TRUE) {
    drupal_set_message(t('Bucket %name created.', array('%name' => $bucket_name)));
  }
  else {
    drupal_set_message(t('Bucket %name could not be created.', array('%name' => $bucket_name)), 'error');
  }
  
  return $newBucket;
}

function amazon_s3_get_bucket_location($bucket) {
  $s3 = amazon_s3_get_instance();
  
  $location = $s3->getBucketLocation($bucket);
  
  if ($location == FALSE) {
    drupal_set_message(t('Unable to fetch location of %name.', array('%name' => $bucket)));
  }
  
  return $location;
}

function amazon_s3_get_objects($bucket, $prefix = NULL, $marker = NULL, $maxKeys = NULL, $delimiter = NULL, $returnCommonPrefixes = FALSE) {
  $s3 = amazon_s3_get_instance();
  
  $contents = $s3->getBucket($bucket, $prefix, $marker, $maxKeys, $delimiter, $returnCommonPrefixes);
  
  if ($contents == FALSE) {
    drupal_set_message(t('Unable to fetch contents of %name.', array('%name' => $bucket)));
  }
  
  return $contents;
}

function amazon_s3_bucket_delete($bucket) {
  $s3 = amazon_s3_get_instance();
  
  $removeBucket = $s3->deleteBucket($bucket);
  
  if ($removeBucket == TRUE) {
    drupal_set_message(t('Bucket %bucket deleted.', array('%bucket' => $bucket)));
  }
  else {
    drupal_set_message(t('Bucket %bucket could not be deleted.', array('%bucket' => $bucket)), 'error');
  }
  
  return $removeBucket;
}

function amazon_s3_object_delete($bucket, $object) {
  $s3 = amazon_s3_get_instance();
  
  $removeObject = $s3->deleteObject($bucket, $object);
  
  if ($removeObject == TRUE) {
    drupal_set_message(t('Object %object deleted from bucket %bucket.', array('%object' => $object, '%bucket' => $bucket)));
  }
  else {
    drupal_set_message(t('Object %object could not be deleted from bucket %bucket.', array('%object' => $object, '%bucket' => $bucket)), 'error');
  }
  
  return $removeObject;
}

function amazon_s3_get_object_url($bucket, $uri, $lifetime = 7200, $hostBucket = FALSE, $https = FALSE) {
  $s3 = amazon_s3_get_instance();
  return $s3->getAuthenticatedURL($bucket, $uri, $lifetime, $hostBucket, $https);
}

function amazon_s3_prepare_file($file, $md5sum = TRUE) {
  $s3 = amazon_s3_get_instance();
  return $s3->inputFile($file);
}

function amazon_s3_create_object($object, $bucket, $uri, $acl = 'private', $metaHeaders = array(), $requestHeaders = array()) {
  $s3 = amazon_s3_get_instance();
  
  $newObject = $s3->putObject($object, $bucket, $uri, $acl, $metaHeaders, $requestHeaders);
  
  if ($newObject == TRUE) {
    drupal_set_message(t('Object %object created in bucket %bucket.', array('%object' => $uri, '%bucket' => $bucket)));
  }
  else {
    drupal_set_message(t('Object %object could not be created in bucket %bucket.', array('%object' => $uri, '%bucket' => $bucket)), 'error');
  }
  
  return $newObject;
}

function amazon_s3_get_access_policy($bucket, $uri = '') {
  $s3 = amazon_s3_get_instance();
  
  $accessPolicy = $s3->getAccessControlPolicy($bucket, $uri);
  
  // Fetch asset, either an object or a bucket depending on the $uri value
  if ($uri == '') {
    $asset = $bucket;
  }
  else {
    $asset = $uri;
  }
  
  if($accessPolicy == FALSE) {
    drupal_set_message(t('Unable to access policy of %asset.', array('%asset' => $asset)), 'error');
  }
  
  return $accessPolicy;
}

function amazon_s3_get_object_info($bucket, $uri, $returnInfo = TRUE) {
  $s3 = amazon_s3_get_instance();
  
  $objectInfo = $s3->getObjectInfo($bucket, $uri, $returnInfo);
  
  if($objectInfo == FALSE) {
    drupal_set_message(t('Unable to get object information for %object.', array('%object' => $uri)), 'error');
  }
  
  return $objectInfo;
}

function amazon_s3_copy_object($sourceBucket, $sourceUri, $destinationBucket, $destinationUri, $acl = 'private', $metaHeaders = array(), $requestHeaders = array()) {
  $s3 = amazon_s3_get_instance();
  
  $copyObject = $s3->copyObject($sourceBucket, $sourceUri, $destinationBucket, $destinationUri, $acl, $metaHeaders, $requestHeaders);
  
  if($objectInfo == FALSE) {
    drupal_set_message(t('Unable to copy %source to %destination.', array('%source' => $sourceUri, '%destination' => $destinationUri)), 'error');
  }
  
  return $copyObject;
}

function amazon_s3_acl_options() {
  return array(
    'private' => 'Private',
    'public-read' => 'Public Read',
    'public-read-write' => 'Public Read/Write',
    'authenticated-read' => 'Authenticated Read'
  );
}

function amazon_s3_regions() {
  return array(
    '' => t('US (Northern Virginia)'),
    'EU' => t('EU (Ireland)'),
  );
}

/**
 * Forms
 */

function amazon_s3_bucket_create_form($form, &$form_state) {
  $title = t('Add Bucket');
  drupal_set_title($title, PASS_THROUGH);
  
  $form['bucket'] = array(
    '#type' => 'fieldset',
    '#title' => 'Bucket',
  );
  
  $form['bucket']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Bucket Name'),
    '#required' => TRUE,
    '#size' => 30,
  );
  
  $form['bucket']['access_control'] = array(
    '#type' => 'select',
    '#title' => t('Access Control'),
    '#options' => amazon_s3_acl_options(),
  );
  
  $form['bucket']['region'] = array(
    '#type' => 'select',
    '#title' => t('Region'),
    '#description' => t('Region to position your bucket within.'),
    '#options' => amazon_s3_regions(),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Add Bucket',
  );
  
  return $form;
}

function amazon_s3_bucket_create_form_submit($form, &$form_state) {
  amazon_s3_bucket_create($form_state['values']['name'], $form_state['values']['access_control'], $form_state['values']['region']);
  
  $form_state['redirect'] = 'admin/structure/amazon-s3/buckets';
}

function amazon_s3_bucket_delete_confirm_form($form, &$form_state, $bucket) {
  $form['bucket'] = array(
    '#type' => 'value',
    '#value' => $bucket
  );
  
  $confirmation_message = t('Are you sure you want to delete the bucket %bucket?', array('%bucket' => $bucket));
  $cancel_path = 'admin/structure/amazon-s3/buckets';
  
  return confirm_form($form, $confirmation_message, $cancel_path);
}

function amazon_s3_bucket_delete_confirm_form_submit($form, &$form_state) {
  amazon_s3_bucket_delete($form_state['values']['bucket']);
  
  $form_state['redirect'] = 'admin/structure/amazon-s3/buckets';
}

function amazon_s3_object_delete_confirm_form($form, &$form_state, $bucket, $object) {
  $form['bucket'] = array(
    '#type' => 'value',
    '#value' => $bucket,
  );
  
  $form['object'] = array(
    '#type' => 'value',
    '#value' => $object,
  );
  
  $confirmation_message = t("Are you sure you want to delete the object %object from the bucket %bucket?", array('%object' => $object, '%bucket' => $bucket));
  $cancel_path = 'admin/structure/amazon-s3/bucket/' . $bucket;
  
  return confirm_form($form, $confirmation_message, $cancel_path);
}

function amazon_s3_object_delete_confirm_form_submit($form, &$form_state) {
  amazon_s3_object_delete($form_state['values']['bucket'], $form_state['values']['object']);
  
  $form_state['redirect'] = 'admin/structure/amazon-s3/bucket/' . $form_state['values']['bucket'];
}

function amazon_s3_file_upload_form($form, &$form_state, $bucket) {
  $title = t('Add Object to %bucket', array('%bucket' => $bucket));
  drupal_set_title($title, PASS_THROUGH);
  
  $form = array();
  $form['#attributes'] = array('enctype' => 'multipart/form-data');
  
  $form['object'] = array(
    '#type' => 'fieldset',
    '#title' => t('Object'),
  );
  
  $form['object']['file'] = array(
    '#type' => 'file',
    '#title' => t('File'),
    '#description' => t('Pick a file to upload to the bucket %bucket.', array('%bucket' => $bucket)),
    '#size' => 40,
  );
  
  $form['object']['name'] = array(
    '#type' => 'textfield',
    '#title' => 'Object Name',
    '#description' => t('Leave blank to use filename of uploaded file.'),
  );
  
  $form['object']['acl'] = array(
    '#type' => 'select',
    '#title' => t('Access Control'),
    '#options' => amazon_s3_acl_options(),
  );
  
  $form['object']['bucket'] = array(
    '#type' => 'value',
    '#value' => $bucket,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Add Object',
  );
  
  return $form;
}

function amazon_s3_file_upload_form_submit($form, &$form_state) {
  $s3 = amazon_s3_get_instance();
  
  // Prepare file for positioning
  $upload_temp_filepath = $_FILES['files']['tmp_name']['file'];
  $object = amazon_s3_prepare_file($upload_temp_filepath);
  
  // Get URI to use
  if($form_state['values']['name']) {
    $uri = $form_state['values']['name'];
  }
  else {
    $uri = $_FILES['files']['name']['file'];
  }
  
  // Position object
  amazon_s3_create_object($object, $form_state['values']['bucket'], $uri, $form_state['values']['acl']);
  
  $form_state['redirect'] = 'admin/structure/amazon-s3/bucket/' . $form_state['values']['bucket'];
}

/**
 * Implementation of hook_settings().
 */
function amazon_s3_settings() {
  
  $form['access'] = array(
    '#type' => 'fieldset',
    '#title' => 'Amazon S3 Access',
    '#collapsible' => FALSE, 
    '#collapsed' => FALSE,
    '#weight' => 0,
  );
  
  $form['access']['aws_access_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Access Key ID'), 
    '#default_value' => variable_get('aws_access_key', ''),
    '#description' => t('Your Amazon S3 access key.'),
  );
  
  $form['access']['aws_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'), 
    '#default_value' => variable_get('aws_secret_key', ''),
    '#description' => t('Your Amazon S3 secret key.'),
  );
  
  $form['access']['aws_ssl'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable SSL'),
    '#default_value' => variable_get('aws_ssl', FALSE),
    '#description' => t('Use SSL to communicate with Amazon S3.'),
  );
  
  $s3 = amazon_s3_get_instance();
  
  if($s3 != NULL) {
    
    $form['logs'] = array(
      '#type' => 'fieldset',
      '#title' => t('Amazon S3 Logs'),
      '#collapsible' => FALSE, 
      '#collapsed' => FALSE,
      '#weight' => 1,
    );
    
    $form['logs']['aws_logs_bucket'] = array(
      '#type' => 'select',
      '#title' => t('Log Bucket'), 
      '#default_value' => variable_get('aws_logs_bucket', ''),
      '#options' => drupal_map_assoc(amazon_s3_get_buckets(FALSE)),
      '#description' => t('Amazon S3 bucket where log files are stored.'),
    );
    
    $form['logs']['aws_logs_delete'] = array(
      '#type' => 'checkbox',
      '#title' => t('Delete Logs'),
      '#default_value' => variable_get('aws_logs_delete', FALSE),
      '#description' => t('Delete logs off Amazon S3 after they have been processed.'),
    );
    
  }
  
  return system_settings_form($form);
}

function amazon_s3_view_buckets($type) {
  $title = t('Amazon S3 Buckets');
  drupal_set_title($title, PASS_THROUGH);
  
  $output = '';
  $bucketList = amazon_s3_get_buckets();
  
  if ($bucketList != FALSE) {
    $buckets = array();
    foreach ($bucketList as $bucket) {
      
      if($type == 'browser') {
        $actions = l('View Objects', "amazon-s3/browser/" . $bucket);
      }
      else {
        $actions = l('View Objects', "admin/structure/amazon-s3/bucket/$bucket") . '&nbsp;&nbsp;&nbsp;&nbsp;' . l('Delete', "admin/structure/amazon-s3/bucket/$bucket/delete");
      }
      
      $buckets[] = array(
        'name' => $bucket,
        'location' => amazon_s3_get_bucket_location($bucket),
        'actions' => $actions,
      );
    }
    
    $output .= theme('table', array('header' => array('Name', 'Region', 'Actions'), 'rows' => $buckets));
  }
  
  if($type == 'browser') {
    print $output;
  }
  else {
    return $output;
  }
}

function amazon_s3_view_objects($bucket, $type) {
  $title = t('%name objects', array('%name' => $bucket));
  drupal_set_title($title, PASS_THROUGH);
  
  $output = '';
  $objects = amazon_s3_get_objects($bucket, NULL, NULL, 100);
  
  foreach ($objects as &$object) {
    
    if($type == 'browser') {
      $actions = '<a href="' . $bucket . '/' . $object['name'] . '" class="s3-insert">Insert</a>';
    }
    else {
      $actions = l('Download', amazon_s3_get_object_url($bucket, $object['name'])) . '&nbsp;&nbsp;&nbsp;&nbsp;' . l('Delete', "admin/structure/amazon-s3/bucket/$bucket/{$object['name']}/delete");
    }
    
    $object['time']     = format_date($object['time'], 'custom', "j M Y, g:i a");
    $object['size']     = format_size($object['size']);
    $object['actions'] = $actions;
    unset($object['hash']);
  }
  
  $header = array('Name', 'Date Time', 'Size', 'Actions');
  $output .= theme('table', array('header' => $header, 'rows' => $objects));
  
  if($type == 'browser') {
    print $output;
  }
  else {
    return $output;
  }
}

function amazon_s3_process_logs_manually() {
  return amazon_s3_process_logs();
}

function amazon_s3_browse_logs() {
  
  $header = array(
    'uri' => array('data' => t('URI'), 'field' => 'key_param'),
    'bucket' => array('data' => t('Bucket'), 'field' => 'bucket'),
    'bandwidth' => array('data' => t('Bandwidth'), 'field' => 'bandwidth'),
    'requests' => array('data' => t('Requests'), 'field' => 'requests', 'sort' => 'desc'),
  );
  
  $query = db_select('amazon_s3_logs', 'l')->extend('PagerDefault')->extend('TableSort');
  
  $query->fields('l', array('bucket', 'key_param'));
  
  $query->addExpression('COUNT(key_param)', 'requests');
  $query->addExpression('SUM(bytes_sent)', 'bandwidth');
  
  $query->condition('operation', 'REST.GET.OBJECT');
  $query->condition('bytes_sent', 0, '>');
  
  $query->groupBy('key_param');
  
  $query->range(0, 25);
  $query->orderByHeader($header);
  
  $requests = $query->execute()->fetchAll();
  
  $rows = array();
  
  foreach ($requests as $request) {
    $rows[] = array(
      'data' => array($request->key_param, $request->bucket, format_size($request->bandwidth), $request->requests)
    );
  }
  
  $table = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => NULL,
    'colgroups' => array(),
    'sticky' => NULL,
    'empty' => 'No logs found.',
  );
  
  return theme('table', $table).theme('pager');
}

/**
 * Implementation of hook_cron().
 */
function amazon_s3_cron() {
  amazon_s3_process_logs();
}

function amazon_s3_process_logs() {
  $log_bucket = variable_get('aws_logs_bucket', '');
  
  if ($log_bucket == '') {
    // has not been set up yet, so exit
    return '<p>Logging has not been enabled.</p>';
  }
  
  $objects = amazon_s3_get_objects($log_bucket);
  
  $bucket_files = array();
  
  $count_logs = 0;
  $count_lines = 0;
  
  foreach ($objects as $object) {
    $url = amazon_s3_get_object_url($log_bucket, $object['name']);
    $contents = file_get_contents($url);
    
    /*
    0 STRING:               0cfeec4c68bfdbb65648491f1a5983feef2e9e1c13730a961b9c3bb81eef5c32 media-delivery [03/Dec/2010:12:01:41 +0000] 217.151.105.43 0cfeec4c68bfdbb65648491f1a5983feef2e9e1c13730a961b9c3bb81eef5c32 6516B7F919BB4AF6 REST.HEAD.OBJECT 101-high.mp4 "HEAD /101-high.mp4 HTTP/1.1" 404 NoSuchKey 271 - 18 - "-" "S3/php" -
    1 BUCKET_OWNER:         0cfeec4c68bfdbb65648491f1a5983feef2e9e1c13730a961b9c3bb81eef5c32
    2 BUCKET:               media-delivery
    3 DATETIME:             [03/Dec/2010:12:01:41 +0000]
    4 REMOTE IP:            217.151.105.34
    5 REQUESTER:            0cfeec4c68bfdbb65648491f1a5983feef2e9e1c13730a961b9c3bb81eef5c32
    6 REQUEST ID:           6516B7F919BB4AF6
    7 OPERATION:            REST.HEAD.OBJECT
    8 KEY:                  101-high.mp4
    9 REQUEST METHOD:       HEAD
    10 REQUEST URI:         /101-high.mp4
    11 REQUEST PROTOCOL:    HTTP/1.1
    12 HTTP STATUS:         404
    13 ERROR CODE:          NoSuchKey
    14 BYTES SENT:          271
    15 OBJECT SIZE:         -
    16 TOTAL TIME:          18
    17 TURN-AROUND TIME:    -
    18 REFERRER:            -
    19 USER-AGENT:          S3/php
    20 VERSION ID:          -
    */
    
    $pattern = '/^([^ ]+) ([^ ]+) (\[[^\]]+\]) ([^ ]+) ([^ ]+) ([^ ]+) ([^ ]+) ([^ ]+) "(.*) (.*) (.*)" ([^ ]+) ([^ ]+) ([^ ]+) ([^ ]+) ([^ ]+) ([^ ]+) "(.*)" "(.*)" ([^ ]+)$/';
    
    $lines = explode("\n", $contents);
    foreach ($lines as $line) {
      $line = trim($line);
      
      if (preg_match($pattern, $line, $matches)) {
        $datetime = strtotime(str_replace(array("[", "]"), "", $matches[3]));
        
        $fields = array(
          'bucket_owner' => $matches[1],
          'bucket' => $matches[2],
          'date_time' => $datetime,
          'remote_ip' => $matches[4],
          'requester' => $matches[5],
          'request_id' => $matches[6],
          'operation' => $matches[7],
          'key_param' => $matches[8],
          'request_method' => $matches[9],
          'request_uri' => $matches[10],
          'request_protocol' => $matches[11],
          'http_status' => $matches[12],
          'error_code' => $matches[13],
          'bytes_sent' => str_replace('-', 0, $matches[14]),
          'object_size' => str_replace('-', 0, $matches[15]),
          'total_time' => str_replace('-', 0, $matches[16]),
          'turn_around_time' => str_replace('-', 0, $matches[17]),
          'referrer' => $matches[18],
          'user_agent' => $matches[19],
          'version_id' => $matches[20],
        );
        
        db_insert('amazon_s3_logs')->fields($fields)->execute();
        $count_lines++;
      }
    }
    
    if(variable_get('aws_logs_delete', FALSE) != FALSE) {
      amazon_s3_object_delete($log_bucket, $object['name']);
    }
    
    $count_logs++;
  }
  
  drupal_set_message(t('@logs log(s) processed with @lines line(s).', array('@logs' => $count_logs, '@lines' => $count_lines)), 'status', FALSE);
  watchdog('amazon_s3', '@logs log(s) processed with @lines line(s).', array('@logs' => $count_logs, '@lines' => $count_lines), WATCHDOG_NOTICE, NULL);
  
  return '<p>Processing Complete.</p>';
}